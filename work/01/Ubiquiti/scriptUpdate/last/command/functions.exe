
# Em funcoes que retornam valores, para fins de relatório, devem retornar:
#	- 1o = O conteudo;
#	- 2o = O retorno da sua execucao;
# 	* Amabas em um único "echo", separados por "+":
#		ex: echo "$report+$return"
######################################################

##### FUNCOES PADROES PARA ACESSO VIA SSH - USO: #####
#						     #
#	$(connectSSHp22 "$1" "$2" "$3" '[comandos]' )#

# Padrao conexao SSH na porta 22
connectSSHp22() {
	sshpass -p "$2" ssh -p22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' $1@$3 $4 #1>&2>/dev/null
}

# Padrao conexao SSH na porta 7722
connectSSHp7722() {
	sshpass -p "$2" ssh -p7722 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' $1@$3 $4 1>&2>/dev/null
}


#######################################################

backupUbiquiti() {
#	netconf.3.ip= #LINHA COM IP
#	resolv.host.1.name= #LINHA COM NOME DO DISPOSITIVO

	sshpass -p "$2" scp -P22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

	out=$(echo $?)
echo "SAIDA: $?" #TODO: Teste


	if [[ $out = 1 || $out = 255 ]]; then
		sshpass -p "$2" scp -P7722 -o 'ServerAliveCountMax=2' \
			-o 'ServerAliveInterval=10' \
				-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
					-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

		out=$(echo $?)

	fi



	if [[ $out = 1 || $out = 255 ]]; then
		sshpass -p "$2" scp -P22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

		out=$(echo $?)


		if [ $out != 0 ]; then
			sshpass -p "$2" scp -P7722 -o 'ServerAliveCountMax=2' \
				-o 'ServerAliveInterval=10' \
					-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
						-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

			out=$(echo $?)

		fi
	fi


	# Execucao Local
	if [ $out = 0 ]; then
		run=$(cat $4/system.cfg | grep resolv.host.1.name | cut -d= -f2)
		run=$(echo "$run-`cat $4/system.cfg | grep netconf.3.ip= | cut -d= -f2`")

		mv "$4/system.cfg" "$4/$run.cfg"

		out=$(echo $?)

	fi

	echo "$run+$out"

unset run out
}



backupMikroTik() {
#Necessario alterar handAddressToAccess - condicional proprietario

	$(connectSSHp7722 "$1" "$2" "$3" ':foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".backup"]]!="nil") do={/file remove $i}}; /system backup save; :foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".rsc"]]!="nil") do={/file remove $i}}; /export file=[/system identity get name]' 1>&2>/dev/null)

	out=$(echo $?)


#	if [ $out = 1 ] || [ $out = 255 ]; then

#		$(connectSSHp22 "$1" "$2" "$3" ':foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".backup"]]!="nil") do={/file remove $i}}; system backup save' 1>&2>/dev/null)

#		out=$(echo $?)

#	fi


	if [ $out = 0 ]; then
		[[ ! -d /tmp/"$3" ]] && mkdir /tmp/"$3" 1>&2>/dev/null

		$(sshpass -p "$2" scp -P7722 -r -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3:/ /tmp/"$3"/ 1>&2>/dev/null) 

		out=$(echo $?)

#	Execução na porta 22
#		if [ $out = 1 ] || [ $out = 255 ]; then
#			sshpass -p "$2" scp -P22 -r -o 'ServerAliveCountMax=2' \
#			-o 'ServerAliveInterval=10' \
#				-o 'ConnectTimeout=10' \
#					-o 'StrictHostKeyChecking no' $1@$3:/ /tmp/"$3"/ 1>&2>/dev/null
#
#			out=$(echo $?)
#		fi

	fi

	# Execucao Local;
	if [ $out = 0 ]; then

		run=$(ls -R /tmp/"$3"/ | grep .backup | head -n1 \
			| awk -F-20 '{print $1}' | \
				awk '{print $1}')

		[[ ! -d "$4/$run" ]] && mkdir "$4/$run" 1>&2>/dev/null

		# Move os arquivo ".backup" e ".rsc" para um subdiretorio nomeado $run no diretorio definido;
		(mv /tmp/"$3"/*.backup /tmp/"$3"/*.rsc "$4/$run/" 1>2&>/dev/null) || (mv "$(find /tmp/"$3/" -name "*.backup")" "$(find /tmp/$3/ -name "*.rsc")" "$4/$run/" 1>2&>/dev/null)

		rm -rf /tmp/"$3/" &


#mv /tmp/"$3"/*.rsc "$4/$run/" || mv "$(find /tmp/"$3/" -name "*.rsc")" "$4/$run/"



# Tratar erro caso arquivos não seja movidos para o dir definido


# && mv "$file" /tmp/"$3"/*.src "$4/"

	fi


# Basta encontrar o arquivo dentro do diretório, manipular o nome do arquivo e retornar cod. execução;


echo $run+$out
unset run out #file
}




updateUbiquiti() {

	run=$(cat /tmp/script.sh | $(connectSSHp7722 "$1" "$2" "$3" \
			'cat > /tmp/script.sh; chmod +x /tmp/script.sh; echo `cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2 | head -n 1`; /tmp/script.sh'))
	out=$(echo $?)

#	if [[ $out = 1 || $out = 255 ]]; then #EMPRO; Comentado
	if [[ $? = 1 || $? = 255 ]]; then
		run=$(cat /tmp/script.sh | $(connectSSHp7722 "$1" "$2" "$3" \
			'cat > /tmp/script.sh; chmod +x /tmp/script.sh; echo `cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2 | head -n 1`; /tmp/script.sh'))

		out=$(echo $?)
	fi

	echo run+$out

#	unset out
}

scriptUpdateUbiquiti() {
# Caso o diretorio /tmp do equipamento seja maior que 100k vai reinicia-lo
# Cria arquivo script que sera importado para equipamento;
echo "#!/bin/sh
#	rm -f "'$0'"

#	size="'`du -hsm ./ | cut -f1`'"
	size="'`du -hsk /tmp/ | awk '\'{print '$1'}''\''`'"

	if [ \"\$size\" -gt 100 ]; then
		reboot
		return 12
	else

		build=\`cat /etc/version | cut -d"v" -f2-\`

		if [ \$build != $1 ]; then

			version="'`cat /etc/version | cut -d. -f1`'"

			case \$version in
				XM) URL="$3"
					;;
				XW) URL="$4"
					;;
			esac

			cd /tmp
			wget -c -O firmware.bin "'$URL'" # && ubntbox fwupdate.real -m /tmp/firmware.bin #TODO: Descomentar
			

#		elif [ \$build != $2 ]; then
#
#			version="'`cat /etc/version | cut -d. -f1`'"
#
#			case \$version in
#				WA) URL="$5"
#					;;
#				XC) URL="$6"
#					;;
#			esac
#
#			cd /tmp
#			wget -c -O firmware.bin "'$URL'" #&& ubntbox fwupdate.real -m /tmp/firmware.bin && exit 0
#
		else

			exit 11

		fi

	fi" > /tmp/script.sh
}


#		build="'`cat /etc/version | cut -d"v" -f2`'"

#		if [ \"\$build\" != "$1" ]; then
#			version="'`cat /etc/version | cut -d'.' -f1`'"
#			cd /tmp

# Versao 6.0.3
#			if [ \"\$version\" == \"XM\" ]; then
#				URL='http://meusite.com/down.php?id=27'
#				URL="$2"
#				wget -c -O firmware.bin "'$URL'" && mv /tmp/down.php?id=27 /tmp/v$1.bin

#			elif [ \"\$version\" == \"XW\" ]; then
#				URL='http://meusite.com/down.php?id=28'
#				URL="$3"
#				wget -c "'$URL'" && mv /tmp/down.php?id=28 /tmp/v$1.bin

#			elif [ \"\$version\" == \"WA\" ]; then	
#				URL="$3"
#				wget -c "'$URL'" && mv /tmp/down.php?id=28 /tmp/v$1.bin

#			elif [ \"\$version\" == \"XC\" ]; then
#				URL="$3"
#				wget -c "'$URL'" && mv /tmp/down.php?id=28 /tmp/v$1.bin				

#			fi

#			ubntbox fwupdate.real -m /tmp/firmware.bin && exit 0
#		fi
#	fi" > /tmp/.script.sh


checkVersion() {

	$(connectSSHp22 "$1" "$2" "$3" "[ \$(cat /etc/version | cut -d"v" -f2-) = "$4" ] && exit 0 || exit 13")
	out=$(echo $?)

	if [[ $out = 1 || $out = 255 ]]; then
		$(connectSSHp7722 "$1" "$2" "$3" "[ \$(cat /etc/version | cut -d"v" -f2-) = "$4" ] && exit 0 || exit 13")
		out=$(echo $?)

	fi

	echo $out
	unset out
}



source ./chk/handling.ch

# Contem somente as caixas de dialogo com as informacoes necessarias;


	# Verifica retorno de erro zenity;
warningReturn() {

	case $1 in
		1 | default) zenity --error --width=200 --height=100 \
				--text="\nEntrada inválida/vazia."
			kill -9 $$
			;;
	esac
}


	# Funcao principal, contendo menu de opcoes;
selectFunction() {

option1='Backup MikroTik'
option2='Backup Ubiquiti'
option3='Change channel massive'
option4='Change User and/or Password massive'
option5='Change services/ports'
option6='Create ComplianceTest massive'
option7='Custom command'
option8='Active address'
option9='Report devices Ubiquiti (Client-Full)'

	FSELECT=$(zenity --width=450 --height=400 \
		--list --title="Functions" --text="Select option: " \
			--radiolist --column "Selection" --column "Function" \
				TRUE "$option1" FALSE "$option2" FALSE "$option3" FALSE "$option4"\
					FALSE "$option5" FALSE "$option6" FALSE "$option8" FALSE "$option9")

	warningReturn $?

	verifyOption "$FSELECT"
}



	# Seleciona o modo de execucao, por address list ou range de IP;
selectModeExecution() {

	MOD=$(zenity --width=200 --height=150 \
		--list --title="Modo exec." --text="Selecione o modo de execução:" \
			--radiolist --column "Selection" --column="Mode" \
				TRUE "Range de IP" FALSE "Address list")

	warningReturn $?

	verifyModeExec "$MOD" "addressEntry" "selectFile" 

	# Chamada de funcao handling para executar dataAccess
	handData "dataAccess" 0

}


#TODO: Rever a necessidade do case;
	# Seleciona o arquivo a ser lido por funcoes posteriores;
selectFile() {

FILE=$(zenity --file-selection --title="Selecione o arquivo\
	contendo os enderecos IP")

	case $? in
		0) zenity --info --width=275 --height=130 \
				--text="\nArquivo selecionado: \n\n $FILE\n"

			sed -i 's/\r//g' $FILE
			modeFunction='handFileToAccess "$FILE"'
			;;

		1) zenity --warning \
				--text="\nNenhum arquivo selecionado."
			exit 10
			;;

		-1) zenity --error \
			--text="\nOcorreu algum erro. Reexecute a aplicaçao"
			$0
			;;
	esac
}



saveFiles() {

	dstFILES=$(zenity --file-selection --directory \
		--title="Salvar arquivos de backup em: ")

	case $? in
		1) dstFILES="$HOME/backup-$(date +%d%m%Y_%H%M)"
			zenity --warning --width=400 --height=100 \
				--text="\nNenhum diretório de destino criado/selecionado. \n\nSera salvo em $dstFILES"
			;;
	esac

	echo "$dstFILES"
unset dstFILES
}


	# Seleciona/cria um arquivo para salvar um relatorio;
saveFileReport() {

	toFILE=$(zenity --file-selection --filename=/tmp/log.txt --save --confirm-overwrite \
		--title="Salvar relatorio de saida em: ")

	case $? in
		1) zenity --warning --width=400 --height=100 \
			--text="\nNenhum arquivo de destino criado/selecionado. \n\nSera salvo em /tmp/log.txt"
			toFILE='/tmp/log.txt'
			;;
	esac
}



	# Recebe os dados de acesso ao equipamento;
dataAccess() {
	UaP=$(zenity --title="Usuário e senha dos dispositivos" \
		--password --username)

	warningReturn $?

	echo $(echo $UaP | cut -d'|' -f1)+$(echo $UaP | cut -d'|' -f2)
	unset UaP
}



	# Recebe endereco IP inicial e final
addressEntry() {

	modeFunction=handAddressToAccess

IP=$(zenity --forms --title="Defina a range de endereços" --width=320 --height=150 \
	--text="Informe a range de IP" --separator="," \
		--add-entry="IP inicial:" \
		--add-entry="IP final:" )

	warningReturn $?

	checkOcteto "$IP" "addressEntry"
}


#########################################################
############## Extras - Novas funcoes >>> ###############


infoChangeChannels(){
	zenity --question --width=450 --height=120 --title="WARNING!" \
		--text="Caso o DFS do equipamento esteja ativo, será desativado. A lista de rastreio só vai conter o(s) canal(is) informado(s) na próxima etapa.\
			\n\n Deseja continuar?"

	warningReturn $?
}



entryChannels() {

	zenity --entry --title="" \
		--text="Entre com o canal desejado, caso seja mais de um separe-os por vírgula, sem espaçamentos: "

	warningReturn $?

}



selectOptionCT() {
	zenity --question --width=450 --height=120 --title="WARNING!" \
		--text="Além de liberar Compliance Teste, deseja usá-lo? \
			\n\n Será habilitado o DFS e selecionado Compliance Test como seu país."

#	echo $?

}



entryNewData() {
	NWUaP=$(zenity --title="Novo usuário e nova senha para os dispositivos" \
		--password --username)

	warningReturn $?

	echo $(echo $NWUaP | cut -d'|' -f1)+$(echo $NWUaP | cut -d'|' -f2)
	unset NWUaP

}


entryCustomCommand() {
	
	zenity --entry --title="" \
		--text="Informe o comando: "

	warningReturn $?
}


disableServices() {

	zenity --warning --width=400 --height=100 --title="ATTENTION!" \
			--text="\nSeja coerente ao selecionar as opções a seguir, o equipamento será configurado de acordo com as suas definições."

	disableSERVICE=$(zenity --list --title="Desabilitar serviços" --text "Caso queira desabilitar algum serviço, selecione abaixo.\n\n   * Serviços não selecionados serão habilitados caso estejam desabilitados;" --checklist --separator="+" \
				--column "Seleção" --column "Serviço" \
					FALSE "HTTP" FALSE "HTTPS" FALSE "SSH")

	warningReturn $?

	echo $disableSERVICE
	unset disableSERVICE
}


changePorts() {

	changeHTTP=$(zenity --question --width=450 --height=120 --title="Serviço HTTP" \
		--text="Deseja alterar a porta HTTP? ")

		case $? in
			0) changeHTTP=$(zenity --entry --title="" \
				--text="Porta para o serviço HTTP: ")

				warningReturn $?
				;;
		esac

	changeHTTPS=$(zenity --question --width=450 --height=120 --title="Serviço HTTPS" \
		--text="Deseja alterar a porta HTTPS? ")

		case $? in
			0) changeHTTPS=$(zenity --entry --title="" \
				--text="Porta para o serviço HTTPS: ")

				warningReturn $?
				;;
		esac

	changeSSH=$(zenity --question --width=450 --height=120 --title="Serviço SSH" \
		--text="Deseja alterar a porta do serviço SSH? ")

		case $? in
			0) changeSSH=$(zenity --entry --title="" \
				--text="Porta para o serviço SSH: ")

				warningReturn $?
				;;
		esac

	echo "$changeHTTP+$changeHTTPS+$changeSSH"
	unset changeHTTP changeHTTPS changeSSH
}


# Em funcoes que retornam valores, para fins de relatório, devem retornar:
#	- 1o = O conteudo;
#	- 2o = O retorno da sua execucao;
# 	* Amabas em um único "echo", separados por "+":
#		ex: echo "$report+$return"
######################################################

##### FUNCOES PADROES PARA ACESSO VIA SSH - USO: #####
#						     #
#	$(connectSSHp* "$1" "$2" "$3" '[comandos]' )#

# Padrao conexao SSH na porta 22
connectSSHp22() {
	sshpass -p "$2" ssh -p22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' $1@$3 $4 1>&2>/dev/null
}

# Padrao conexao SSH na porta 7722
connectSSHp7722() {
	sshpass -p "$2" ssh -p7722 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' $1@$3 $4 1>&2>/dev/null
}


# Acesso SSH na porta 22 com algoritmo de criptografia Diffie-hellman
connectSSHp22Diffie() {
	sshpass -p "$2" ssh -p22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' -o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
			-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' $1@$3 $4 1>&2>/dev/null

}

# Acesso SSH na porta 7722 com algoritmo de criptografia Diffie-hellman
connectSSHp7722Diffie() {
	sshpass -p "$2" ssh -p7722 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' -o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
			-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' $1@$3 $4 1>&2>/dev/null

}

#######################################################

backupUbiquiti() {
#	netconf.3.ip= # IP DO DISPOSITIVO
#	resolv.host.1.name= # NOME DO DISPOSITIVO

	sshpass -p "$2" scp -P22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

	out=$(echo $?)


	if [[ $out = 1 || $out = 255 ]]; then
		sshpass -p "$2" scp -P7722 -o 'ServerAliveCountMax=2' \
			-o 'ServerAliveInterval=10' \
				-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
					-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

		out=$(echo $?)

	fi



	if [[ $out = 1 || $out = 255 ]]; then
		sshpass -p "$2" scp -P22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

		out=$(echo $?)


		if [ $out != 0 ]; then
			sshpass -p "$2" scp -P7722 -o 'ServerAliveCountMax=2' \
				-o 'ServerAliveInterval=10' \
					-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
						-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

			out=$(echo $?)

		fi
	fi


	# Execucao Local
	if [ $out = 0 ]; then
		run=$(cat $4/system.cfg | grep resolv.host.1.name | cut -d= -f2)
		run=$(echo "$run-`cat $4/system.cfg | grep netconf.3.ip= | cut -d= -f2`")

		mv "$4/system.cfg" "$4/$run.cfg"

		out=$(echo $?)

	fi

	echo "$run+$out"

unset run out
}



backupMikroTik() {
#Necessario alterar handAddressToAccess - condicional proprietario

	$(connectSSHp7722 "$1" "$2" "$3" ':foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".backup"]]!="nil") do={/file remove $i}}; /system backup save; :foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".rsc"]]!="nil") do={/file remove $i}}; /export file=[/system identity get name]' 1>&2>/dev/null)

	out=$(echo $?)


	if [ $out = 1 ] || [ $out = 255 ]; then

		$(connectSSHp22 "$1" "$2" "$3" ':foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".backup"]]!="nil") do={/file remove $i}}; system backup save' 1>&2>/dev/null)

		out=$(echo $?)

	fi


	if [ $out = 0 ]; then
		[[ ! -d /tmp/"$3" ]] && mkdir /tmp/"$3" 1>&2>/dev/null

		$(sshpass -p "$2" scp -P7722 -r -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3:/ /tmp/"$3"/ 1>&2>/dev/null) 

		out=$(echo $?)

#	Execução na porta 22
#		if [ $out = 1 ] || [ $out = 255 ]; then
#			sshpass -p "$2" scp -P22 -r -o 'ServerAliveCountMax=2' \
#			-o 'ServerAliveInterval=10' \
#				-o 'ConnectTimeout=10' \
#					-o 'StrictHostKeyChecking no' $1@$3:/ /tmp/"$3"/ 1>&2>/dev/null
#
#			out=$(echo $?)
#		fi

	fi

	# Execucao Local;
	if [ $out = 0 ]; then

		run=$(ls -R /tmp/"$3"/ | grep .backup | head -n1 \
			| awk -F-20 '{print $1}' | \
				awk '{print $1}')

		[[ ! -d "$4/$run" ]] && mkdir "$4/$run" 1>&2>/dev/null

		# Move os arquivo ".backup" e ".rsc" para um subdiretorio nomeado $run no diretorio definido;
		(mv /tmp/"$3"/*.backup /tmp/"$3"/*.rsc "$4/$run/" 1>&2>/dev/null) || (mv "$(find /tmp/"$3/" -name "*.backup")" "$(find /tmp/$3/ -name "*.rsc")" "$4/$run/" 1>&2>/dev/null)

		rm -rf /tmp/"$3/" &


#mv /tmp/"$3"/*.rsc "$4/$run/" || mv "$(find /tmp/"$3/" -name "*.rsc")" "$4/$run/"



# Tratar erro caso arquivos não seja movidos para o dir definido


# && mv "$file" /tmp/"$3"/*.src "$4/"

	fi


# Basta encontrar o arquivo dentro do diretório, manipular o nome do arquivo e retornar cod. execução;


echo $run+$out
unset run out #file
}



changeChannel(){

	$(connectSSHp22 "$1" "$2" "$3" << OEF
		[ \$(cat /tmp/system.cfg | grep radio.1.dfs | cut -d= -f2) = "enabled" ] && sed -i 's/radio.1.dfs.status=.*/radio.1.dfs.status=disabled/' /tmp/system.cfg; 
		cat /tmp/system.cfg | grep wireless.1.scan_list.status; [ $? = 0 ] && sed -i 's/scan_list.status.*/scan_list.status=enabled/' /tmp/system.cfg || echo "wireless.1.scan_list.status=enabled" >> /tmp/system.cfg
		cat /tmp/system.cfg | grep wireless.1.scan_list.channels; [ $? = 0 ] && sed -i "s/wireless.1.scan_list.channels=.*/wireless.1.scan_list.channels=$4/" /tmp/system.cfg || echo "wireless.1.scan_list.channels=$4" >> /tmp/system.cfg
OEF
)

	out=$(echo $?)

		if [ $out = 255 ] || [ $out = 1 ]; then

#			cat "$dstScript" | $(connectSSHp22 "$1" "$2" "$3" 'cat > /tmp/sc; chmod +x /tmp/sc; /tmp/sc' )


			$(connectSSHp7722 "$1" "$2" "$3" << OEF
				[ \$(cat /tmp/system.cfg | grep radio.1.dfs | cut -d= -f2) = "enabled" ] && sed -i 's/radio.1.dfs.status=.*/radio.1.dfs.status=disabled/' /tmp/system.cfg; 
				cat /tmp/system.cfg | grep wireless.1.scan_list.status; [ $? = 0 ] && sed -i 's/scan_list.status.*/scan_list.status=enabled/' /tmp/system.cfg || echo "wireless.1.scan_list.status=enabled" >> /tmp/system.cfg
			cat /tmp/system.cfg | grep wireless.1.scan_list.channels; [ $? = 0 ] && sed -i "s/wireless.1.scan_list.channels=.*/wireless.1.scan_list.channels=$4/" /tmp/system.cfg || echo "wireless.1.scan_list.channels=$4" >> /tmp/system.cfg
OEF
)
			out=$(echo $?)
		fi

	echo $out
unset out
}


################################################################################
########################## Funcao inutilizavel #################################
createScChannels() {

	name=$(uname -sr | md5sum -t | cut -d- -f1)
	dstScript="/tmp/.$name"
	unset name
	mkdir -p "$dstScript"

echo "#!/bin/sh
	if [[ \$(cat /tmp/system.cfg | grep radio.1.dfs | cut -d= -f2) == \"enabled\" ]]; then
		sed -i 's/radio.1.dfs.status=.*/radio.1.dfs.status=disabled/' /tmp/system.cfg
	fi

	grep wireless.1.scan_list.status /tmp/system.cfg

	if [ \$? = 0 ]; then
		sed -i 's/scan_list.status.*/scan_list.status=enabled/' /tmp/system.cfg 
	else
		echo "wireless.1.scan_list.status=enabled" >> /tmp/system.cfg
	fi


	grep wireless.1.scan_list.channels /tmp/system.cfg

	if [ \$? = 0 ]; then
		sed -i "s/wireless.1.scan_list.channels=.*/wireless.1.scan_list.channels=$1/" /tmp/system.cfg
	else
		echo "wireless.1.scan_list.channels=$1" >> /tmp/system.cfg;
	fi

	cfgmtd -w -p /etc/ " > "$dstScript"/.XsetRmt

	dstScript="$dstScript/.XsetRmt"
}



changeUserPwd() {

	$(connectSSHp22 "$1" "$2" "$3" << OEF
		(sleep 2; echo "$5"; sleep 2; echo "$5") | passwd || exit

		/bin/sed -i "s/users.1.name=.*/users.1.name=$4/" /tmp/system.cfg
		/bin/sed -i '/users.1.password/d' /tmp/system.cfg
		echo "users.1.password=\`head -n1 /etc/passwd | cut -d: -f2\`" >> /tmp/system.cfg
		cfgmtd -w -p /etc/ && reboot

OEF
)
	out=$(echo $?)

	if [[ $out = 1 || $out = 255 ]]; then
		$(connectSSHp7722 "$1" "$2" "$3" << OEF
			(sleep 2; echo "$5"; sleep 2; echo "$5") | passwd || exit

			sed -i "s/users.1.name=.*/users.1.name=$4/" /tmp/system.cfg
			sed -i "s/users.1.password=.*/users.1.password=\`head -n1 /etc/passwd | cut -d: -f2\`/" /tmp/system.cfg
			cfgmtd -w -p /etc/ && reboot
OEF
)
	out=$(echo $?)

	fi


	if [[ $out = 1 || $out = 255 ]]; then
		sshpass -p "$2" ssh -p22 -o 'ServerAliveCountMax=2' -o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
				-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' "$1"@"$3" << OEF

			(sleep 2; echo "$5"; sleep 2; echo "$5") | passwd || exit

			sed -i "s/users.1.name=.*/users.1.name=$4/" /tmp/system.cfg
			sed -i "s/users.1.password=.*/users.1.password=\`head -n1 /etc/passwd | cut -d: -f2\`/" /tmp/system.cfg
#			cfgmtd -w -p /etc/ && reboot
OEF

		out=$(echo $?)


		if [[ $out = 1 || $out = 255 ]]; then
			sshpass -p "$2" ssh -p7722 -o 'ServerAliveCountMax=2' \
				-o 'ServerAliveInterval=10' -o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
						-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' "$1"@"$3" << OEF

			(sleep 2; echo "$5"; sleep 2; echo "$5") | passwd || exit

			sed -i "s/users.1.name=.*/users.1.name=$4/" /tmp/system.cfg
			sed -i "s/users.1.password=.*/users.1.password=\`head -n1 /etc/passwd | cut -d: -f2\`/" /tmp/system.cfg
			cfgmtd -w -p /etc/ && reboot
OEF

			out=$(echo $?)

		fi
	fi



	echo $out
unset out
}



massiveCompliance() {

	$(connectSSHp22 "$1" "$2" "$3" 'cat /etc/persistent/ct && exit 10 || (touch /etc/persistent/ct; cfgmtd -w -p /etc/; reboot)')
	out=$(echo $?)

	if [ $out = 255 ] || [ $out = 1 ]; then

		$(connectSSHp7722 "$1" "$2" "$3" 'cat /etc/persistent/ct && exit 10 || (touch /etc/persistent/ct; cfgmtd -w -p /etc/; reboot)')
		out=$(echo $?)
	fi

	echo $out
unset out
}




deviceFullReport() {
	run=$(sshpass -p $2 ssh -p22 -o 'ServerAliveCountMax=2' -o 'ServerAliveInterval=10' -o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' -o 'StrictHostKeyChecking no' $1@$3 'echo "`cat /etc/board.info | grep board.name | cut -d= -f2`+`cat /etc/board.info | grep board.hwaddr | cut -d= -f2`+`cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2 | head -n 1`+`cat /tmp/system.cfg | grep wireless.1.ssid | cut -d= -f2 | head -n1`+-`/usr/www/signal.cgi | grep signal | cut -d- -f2 | cut -c-2`"') 1>&2>/dev/null

	out=$?

	if [ $out = 255 ]; then
		run=$(sshpass -p $2 ssh -p7722 -o 'ServerAliveCountMax=2' -o 'ServerAliveInterval=10' -o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' -o 'StrictHostKeyChecking no' $1@$3 'echo "`cat /etc/board.info | grep board.name | cut -d= -f2`+`cat /etc/board.info | grep board.hwaddr | cut -d= -f2`+`cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2 | head -n 1`+`cat /tmp/system.cfg | grep wireless.1.ssid | cut -d= -f2 | head -n1`+-`/usr/www/signal.cgi | grep signal | cut -d- -f2 | cut -c-2`"') 1>&2>/dev/null

		out=$?
	fi
	
	echo $run+$out

unset out run
}




customCommand() {

	connectSSHp22 $1 $2 $3 "$4"
	out=$(echo $?)

	if [[ $out = 1 || $out = 255 ]]; then
		connectSSHp7722 $1 $2 $3 "$4"
		out=$(echo $?)

		if [[ $out = 1 || $out = 255 ]]; then
			sshpass -p "$2" ssh -p22 -o 'ServerAliveCountMax=2' \
				-o 'ServerAliveInterval=10' -o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
					-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' "$1"@"$3" "$4"
			out=$(echo $?)

			if [[ $out = 1 || $out = 255 ]]; then
				sshpass -p "$2" ssh -p7722 -o 'ServerAliveCountMax=2' \
					-o 'ServerAliveInterval=10' -o 'ConnectTimeout=10' -o 'UserKnownHostsFile=/dev/null' \
						-o 'StrictHostKeyChecking no' -o 'KexAlgorithms=+diffie-hellman-group1-sha1' "$1"@"$3" "$4"
				out=$(echo $?)
			fi

		fi

	fi

	exit $out
unset out
}



servicesPorts() {

#	if [ -z $command ]; then

#echo "Command vazio" #TODO: Comantario

		command='sed -i 's/httpd.status=.*/httpd.status=enabled/' /tmp/system.cfg && sed -i 's/httpd.https.status=.*/httpd.https.status=enabled/' /tmp/system.cfg'


	if [[ -n "$4" ]]; then

		for (( i=1; i <= 3; i++ )); do
			service=$(echo $4 | cut -d"+" -f$i)

			if [[ -n "$service" && "$service" != "" && $service != " " ]]; then

				case $service in
					HTTP) command=$(echo $command | sed 's/httpd.status=enabled/httpd.status=disabled/')
						;;
					HTTPS) command=$(echo $command | sed 's/httpd.https.status=enabled/httpd.https.status=disabled/')
						;;
					SSH) preCommand='sed -i 's/sshd.status=.*/sshd.status=disabled/' /tmp/system.cfg'
						;;
				esac

			fi	

				if [ -n "$preCommand" ]; then
					if [ -z "$command" ]; then
						command="$preCommand"
					elif [ "$command" != "$preCommand" ]; then
						command="$command; $preCommand"
					fi
				fi

#echo $command

			unset service preCommand
		done

	fi


			# Tratamento variavel servicesPort, recebe portas dos serviços
		if [ -n $5 ]; then

			for (( i=1; i <= 3; i++ )); do
				port=$(echo $5 | cut -d+ -f$i)

				if [ "$port" != "" ]; then
					case $i in
						1) preCommand="cat /tmp/system.cfg | grep httpd.status=enabled && sed -i \"s/httpd.port=.*/httpd.port=$port/\" /tmp/system.cfg || (sed -i "s/httpd.status=.*/httpd.status=enabled/" /tmp/system.cfg && sed -i "s/httpd.port=.*/httpd.port=$port/" /tmp/system.cfg)"
							;;
						2) preCommand="sed -i \"s/httpd.https.port=.*/httpd.https.port=$port/\" /tmp/system.cfg"
							;;
						3) preCommand="sed -i \"s/sshd.port=.*/sshd.port=$port/\" /tmp/system.cfg"
							;;
					esac

					if [ -z "$command" ]; then
						command="$preCommand"
					elif [ "$command" != "$preCommand" ]; then
						command="$command; $preCommand"
					fi
			
				fi

				unset port preCommand
			done

#echo -e "\n\n\nCommand final=$command"

		fi

		connectSSHp22 $1 $2 $3 << OEF 
			cat /tmp/system.cfg | sort | uniq > /tmp/sorted.cfg && mv /tmp/sorted.cfg /tmp/system.cfg
sed -i 's/ssh.port.*//g' /tmp/system.cfg
[ $(cat /tmp/system.cfg | grep sshd.port | wc -l) -eq 1 ] || (sed -i 's/sshd.port=.*//g' /tmp/system.cfg && echo 'sshd.port=7722' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.port= | wc -l) -eq 1 ] || (sed -i 's/httpd.port=.*//g' /tmp/system.cfg && echo 'httpd.port=80' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep sshd.status | wc -l) -eq 1 ] || (sed -i 's/sshd.status=.*//g' /tmp/system.cfg && echo 'sshd.status=enabled' >> /tmp/system.cfg)
			$command
			sed 's/gui.language=.*/gui.language=pt_PT/' /tmp/system.cfg
[ $(cat /tmp/system.cfg | grep 1.ssid | wc -l) -eq 2 ] || cfgmtd -w -p /etc && reboot && exit 127
			cfgmtd -w -p /etc && reboot
OEF
		out=$(echo $?)

		if [[ $out = 1 || $out = 255 ]]; then
			connectSSHp7722 $1 $2 $3 << OEF 
				cat /tmp/system.cfg | sort | uniq > /tmp/sorted.cfg && mv /tmp/sorted.cfg /tmp/system.cfg
sed -i 's/ssh.port.*//g' /tmp/system.cfg
[ $(cat /tmp/system.cfg | grep sshd.port | wc -l) -eq 1 ] || (sed -i 's/sshd.port=.*//g' /tmp/system.cfg && echo 'sshd.port=7722' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.port= | wc -l) -eq 1 ] || (sed -i 's/httpd.port=.*//g' /tmp/system.cfg && echo 'httpd.port=80' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep sshd.status | wc -l) -eq 1 ] || (sed -i 's/sshd.status=.*//g' /tmp/system.cfg && echo 'sshd.status=enabled' >> /tmp/system.cfg)
				$command
				sed 's/gui.language=.*/gui.language=pt_PT/' /tmp/system.cfg
				cfgmtd -w -p /etc && reboot
OEF
			out=$(echo $?)

			if [[ $out = 1 || $out = 255 ]]; then
				connectSSHp22Diffie $1 $2 $3 << OEF
					cat /tmp/system.cfg | sort | uniq > /tmp/sorted.cfg && mv /tmp/sorted.cfg /tmp/system.cfg
sed -i 's/ssh.port.*//g' /tmp/system.cfg
[ $(cat /tmp/system.cfg | grep sshd.port | wc -l) -eq 1 ] || (sed -i 's/sshd.port=.*//g' /tmp/system.cfg && echo 'sshd.port=7722' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.port= | wc -l) -eq 1 ] || (sed -i 's/httpd.port=.*//g' /tmp/system.cfg && echo 'httpd.port=80' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep sshd.status | wc -l) -eq 1 ] || (sed -i 's/sshd.status=.*//g' /tmp/system.cfg && echo 'sshd.status=enabled' >> /tmp/system.cfg)
					$command
					sed 's/gui.language=.*/gui.language=pt_PT/' /tmp/system.cfg
					cfgmtd -w -p /etc && reboot
OEF
				out=$(echo $?)

				if [[ $out = 1 || $out = 255 ]]; then
					connectSSHp7722Diffie $1 $2 $3 << OEF
					cat /tmp/system.cfg | sort | uniq > /tmp/sorted.cfg && mv /tmp/sorted.cfg /tmp/system.cfg
sed -i 's/ssh.port.*//g' /tmp/system.cfg
[ $(cat /tmp/system.cfg | grep sshd.port | wc -l) -eq 1 ] || (sed -i 's/sshd.port=.*//g' /tmp/system.cfg && echo 'sshd.port=7722' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.port= | wc -l) -eq 1 ] || (sed -i 's/httpd.port=.*//g' /tmp/system.cfg && echo 'httpd.port=80' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep httpd.https.status | wc -l) -eq 1 ] || (sed -i 's/httpd.https.status.*//g' /tmp/system.cfg && echo 'httpd.https.status=enabled' >> /tmp/system.cfg)
[ $(cat /tmp/system.cfg | grep sshd.status | wc -l) -eq 1 ] || (sed -i 's/sshd.status=.*//g' /tmp/system.cfg && echo 'sshd.status=enabled' >> /tmp/system.cfg)
					$command
					sed 's/gui.language=.*/gui.language=pt_PT/' /tmp/system.cfg
					cfgmtd -w -p /etc && reboot
OEF
					out=$(echo $?)

				fi

			fi

		fi

#	fi

	echo $out
}


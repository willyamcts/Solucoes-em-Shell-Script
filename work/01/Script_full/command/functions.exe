
# Em funcoes que retornam valores, para fins de relatório, devem retornar:
#	- 1o = O conteudo;
#	- 2o = O retorno da sua execucao;
# 	* Amabas em um único "echo", separados por "+":
#		ex: echo "$report+$return"
######################################################

##### FUNCOES PADROES PARA ACESSO VIA SSH - USO: #####
#						     #
#	$(connectSSHp22 "$1" "$2" "$3" '[comandos]' )#
######################################################

# Padrao conexao SSH na porta 22
connectSSHp22() {
	sshpass -p "$2" ssh -p22 -o 'UserKnownHostsFile=/dev/null' -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3 $4
}

# Padrao conexao SSH na porta 7722
connectSSHp7722() {
	sshpass -p "$2" ssh -p7722 -o 'UserKnownHostsFile=/dev/null' \
		-o 'ServerAliveCountMax=2' -o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3 $4
}

#######################################################

backupUbiquiti() {
#	netconf.3.ip= #LINHA COM IP
#	resolv.host.1.name= #LINHA COM NOME DO DISPOSITIVO

	sshpass -p "$2" scp -P22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/"

	out=$(echo $?)

	if [[ $out -eq 255 || $out -eq 1 ]]; then
		sshpass -p "$2" scp -P7722 -o 'ServerAliveCountMax=2' \
			-o 'ServerAliveInterval=10' \
				-o 'ConnectTimeout=10' \
					-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/"

		out=$(echo $?)
	fi


	if [ $out -eq 0 ]; then
		run=$(cat $4/system.cfg | grep resolv.host.1.name | cut -d= -f2)
		run=$(echo "$run-`cat $4/system.cfg | grep netconf.3.ip= | cut -d= -f2`")

		mv "$4/system.cfg" "$4/$run.cfg"

		out=$(echo $?)



	#	echo "backupUbiquiti - Funcao vazia - arg1=$1, arg2=$2, arg3=$3 arg4=$4"

	fi


	echo "$run+$out"

unset run out
}



backupMikroTik() {
#Necessario alterar handAddressToAccess - condicional proprietario

echo "BkpMikroTik - Default"
run="teste"
out=0
#	run=$(connectSSHp22 "$1" "$2" "$3" ':foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".backup"]]!="nil") do={/file remove $i}}; system backup save')
# Basta encontrar o arquivo dentro do diretório, manipular o nome do arquivo e retornar cod. execução;


echo $run+$out
unset run out
}


restoreBackup() {
echo "NÃO IMPLEMENTADA"

#	system identity print #ID da RB

#	cat [local.arq.backup] | sshpass -p "$2" ssh -p22 $1@$3 'cat > /tmp/system.cfg; cfgmtd -w -p /etc/; reboot'
#
}



massiveCompliance() {

	$(connectSSHp22 "$1" "$2" "$3" 'cat /etc/persistent/ct && exit 10 || (touch /etc/persistent/ct; cfgmtd -w -p /etc/; reboot)')

	out=$(echo $?)

	if [ $out -eq 255 ] || [ $out -eq 1 ]; then

		$(connectSSHp7722 "$1" "$2" "$3" 'cat /etc/persistent/ct && exit 10 || (touch /etc/persistent/ct; cfgmtd -w -p /etc/; reboot)')

		out=$(echo $?)
	fi

	echo $out
unset out
}




deviceFullReport() {

	run=$(connectSSHp22 "$1" "$2" "$3" 'echo "`cat /etc/board.info | grep board.name | cut -d= -f2`+
		`cat /etc/board.info | grep board.hwaddr | cut -d= -f2`+`cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2 | head -n 1`+
			`cat /tmp/system.cfg | grep wireless.1.ssid | cut -d= -f2`+-`/usr/www/signal.cgi | grep signal | cut -d- -f2 | cut -c-2`"')

	out=$?

	if [ $out -eq 255 ]; then
		run=$(connectSSHp7722 "$1" "$2" "$3" 'echo "`cat /etc/board.info | grep board.name | cut -d= -f2`+
		`cat /etc/board.info | grep board.hwaddr | cut -d= -f2`+`cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2  | head -n 1`+
			`cat /tmp/system.cfg | grep wireless.1.ssid | cut -d= -f2`+-`/usr/www/signal.cgi | grep signal | cut -d- -f2 | cut -c-2`"')

		out=$?
	fi
	
	echo $run+$out

unset out run
}




removeLinesDuplicate() {

echo "Remover linhas duplicadas - ARG1:$1, ARG2:$2"

}


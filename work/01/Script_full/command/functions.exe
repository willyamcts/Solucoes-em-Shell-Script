
# Em funcoes que retornam valores, para fins de relatório, devem retornar:
#	- 1o = O conteudo;
#	- 2o = O retorno da sua execucao;
# 	* Amabas em um único "echo", separados por "+":
#		ex: echo "$report+$return"
######################################################

##### FUNCOES PADROES PARA ACESSO VIA SSH - USO: #####
#						     #
#	$(connectSSHp22 "$1" "$2" "$3" '[comandos]' )#

# Padrao conexao SSH na porta 22
connectSSHp22() {
	sshpass -p "$2" ssh -p22 -o 'UserKnownHostsFile=/dev/null' -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3 $4 1>&2>/dev/null
}

# Padrao conexao SSH na porta 7722
connectSSHp7722() {
	sshpass -p "$2" ssh -p7722 -o 'UserKnownHostsFile=/dev/null' \
		-o 'ServerAliveCountMax=2' -o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3 $4 1>&2>/dev/null
}


#######################################################

backupUbiquiti() {
#	netconf.3.ip= #LINHA COM IP
#	resolv.host.1.name= #LINHA COM NOME DO DISPOSITIVO

	sshpass -p "$2" scp -P22 -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

	out=$(echo $?)

	if [[ $out = 255 || $out = 1 ]]; then
		sshpass -p "$2" scp -P7722 -o 'ServerAliveCountMax=2' \
			-o 'ServerAliveInterval=10' \
				-o 'ConnectTimeout=10' \
					-o 'StrictHostKeyChecking no' $1@$3:/tmp/system.cfg "$4/" 1>&2>/dev/null

		out=$(echo $?)
	fi

	# Execucao Local
	if [ $out = 0 ]; then
		run=$(cat $4/system.cfg | grep resolv.host.1.name | cut -d= -f2)
		run=$(echo "$run-`cat $4/system.cfg | grep netconf.3.ip= | cut -d= -f2`")

		mv "$4/system.cfg" "$4/$run.cfg"

		out=$(echo $?)

	fi

	echo "$run+$out"

unset run out
}



backupMikroTik() {
#Necessario alterar handAddressToAccess - condicional proprietario

	$(connectSSHp7722 "$1" "$2" "$3" ':foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".backup"]]!="nil") do={/file remove $i}}; system backup save; :foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".rsc"]]!="nil") do={/file remove $i}}; /export file=[/system identity get name]')

	out=$(echo $?)


#	if [ $out = 1 ] || [ $out = 255 ]; then

#		$(connectSSHp22 "$1" "$2" "$3" ':foreach i in=[/file find] do={:if ([:typeof [:find [/file get $i name] ".backup"]]!="nil") do={/file remove $i}}; system backup save')

#		out=$(echo $?)

#	fi


	if [ $out = 0 ]; then
		mkdir /tmp/"$3" 1>&2>/dev/null

		sshpass -p "$2" scp -P7722 -r -o 'ServerAliveCountMax=2' \
		-o 'ServerAliveInterval=10' \
			-o 'ConnectTimeout=10' \
				-o 'StrictHostKeyChecking no' $1@$3:/ /tmp/"$3"/ 1>&2>/dev/null

		out=$(echo $?)

#		if [ $out = 1 ] || [ $out = 255 ]; then
#			sshpass -p "$2" scp -P22 -r -o 'ServerAliveCountMax=2' \
#			-o 'ServerAliveInterval=10' \
#				-o 'ConnectTimeout=10' \
#					-o 'StrictHostKeyChecking no' $1@$3:/ /tmp/"$3"/ 1>&2>/dev/null
#
#			out=$(echo $?)
#		fi

	fi

	# Execucao Local;
	if [ $out = 0 ]; then

		run=$(ls -R /tmp/"$3"/ | grep backup \
			| awk -F-20 '{print $1}' | \
				awk '{print $1}')

		mkdir "$4/$run" 2>/dev/null

		# Move os arquivo ".backup" e ".rsc" para um subdiretorio nomeado $run no diretorio definido;
		(mv /tmp/"$3"/*.backup /tmp/"$3"/*.rsc "$4/$run/" || mv "$(find /tmp/"$3/" -name "*.backup")" /tmp/"$3"/*.rsc "$4/$run/") && rm -rf /tmp/"$3/"

# Tratar erro caso arquivos não seja movidos para o dir definido


# && mv "$file" /tmp/"$3"/*.src "$4/"

	fi


# Basta encontrar o arquivo dentro do diretório, manipular o nome do arquivo e retornar cod. execução;


echo $run+$out
unset run out #file
}


restoreBackup() {
echo "NÃO IMPLEMENTADA"

#	system identity print #ID da RB

#	cat [local.arq.backup] | sshpass -p "$2" ssh -p22 $1@$3 'cat > /tmp/system.cfg; cfgmtd -w -p /etc/; reboot'
#
}



changeChannel(){

	$(connectSSHp22 "$1" "$2" "$3" << OEF
		[ \$(cat /tmp/system.cfg | grep radio.1.dfs | cut -d= -f2) = "enabled" ] && sed -i 's/radio.1.dfs.status=.*/radio.1.dfs.status=disabled/' /tmp/system.cfg; 
		cat /tmp/system.cfg | grep wireless.1.scan_list.status; [ $? = 0 ] && sed -i 's/scan_list.status.*/scan_list.status=enabled/' /tmp/system.cfg || echo "wireless.1.scan_list.status=enabled" >> /tmp/system.cfg
		cat /tmp/system.cfg | grep wireless.1.scan_list.channels; [ $? = 0 ] && sed -i "s/wireless.1.scan_list.channels=.*/wireless.1.scan_list.channels=$4/" /tmp/system.cfg && echo "existe" || echo "wireless.1.scan_list.channels=$4" >> /tmp/system.cfg
OEF
)

	out=$(echo $?)

		if [ $out = 255 ] || [ $out = 1 ]; then

#			cat "$dstScript" | $(connectSSHp22 "$1" "$2" "$3" 'cat > /tmp/sc; chmod +x /tmp/sc; /tmp/sc' )


			$(connectSSHp7722 "$1" "$2" "$3" << OEF
				[ \$(cat /tmp/system.cfg | grep radio.1.dfs | cut -d= -f2) = "enabled" ] && sed -i 's/radio.1.dfs.status=.*/radio.1.dfs.status=disabled/' /tmp/system.cfg; 
				cat /tmp/system.cfg | grep wireless.1.scan_list.status; [ $? = 0 ] && sed -i 's/scan_list.status.*/scan_list.status=enabled/' /tmp/system.cfg || echo "wireless.1.scan_list.status=enabled" >> /tmp/system.cfg
			cat /tmp/system.cfg | grep wireless.1.scan_list.channels; [ $? = 0 ] && sed -i "s/wireless.1.scan_list.channels=.*/wireless.1.scan_list.channels=$4/" /tmp/system.cfg && echo "existe" || echo "wireless.1.scan_list.channels=$4" >> /tmp/system.cfg
OEF
)
			out=$(echo $?)
		fi

	echo $out
unset out
}


# Funcao inutilizavel
createScChannels() {

	name=$(uname -sr | md5sum -t | cut -d- -f1)
	dstScript="/tmp/.$name"
	unset name
	mkdir -p "$dstScript"

echo "#!/bin/sh
	if [[ \$(cat /tmp/system.cfg | grep radio.1.dfs | cut -d= -f2) == \"enabled\" ]]; then
		sed -i 's/radio.1.dfs.status=.*/radio.1.dfs.status=disabled/' /tmp/system.cfg
	fi

	grep wireless.1.scan_list.status /tmp/system.cfg

	if [ \$? = 0 ]; then
		sed -i 's/scan_list.status.*/scan_list.status=enabled/' /tmp/system.cfg 
	else
		echo "wireless.1.scan_list.status=enabled" >> /tmp/system.cfg
	fi


	grep wireless.1.scan_list.channels /tmp/system.cfg

	if [ \$? = 0 ]; then
		sed -i "s/wireless.1.scan_list.channels=.*/wireless.1.scan_list.channels=$1/" /tmp/system.cfg
	else
		echo "wireless.1.scan_list.channels=$1" >> /tmp/system.cfg;
	fi

	cfgmtd -w -p /etc/ " > "$dstScript"/.XsetRmt

	dstScript="$dstScript/.XsetRmt"
}




massiveCompliance() {

	$(connectSSHp22 "$1" "$2" "$3" 'cat /etc/persistent/ct && exit 10 || (touch /etc/persistent/ct; cfgmtd -w -p /etc/; reboot)')
	out=$(echo $?)

	if [ $out = 255 ] || [ $out = 1 ]; then

		$(connectSSHp7722 "$1" "$2" "$3" 'cat /etc/persistent/ct && exit 10 || (touch /etc/persistent/ct; cfgmtd -w -p /etc/; reboot)')
		out=$(echo $?)
	fi

	echo $out
unset out
}




deviceFullReport() {

	run=$(connectSSHp22 "$1" "$2" "$3" 'echo "`cat /etc/board.info | grep board.name | cut -d= -f2`+
		`cat /etc/board.info | grep board.hwaddr | cut -d= -f2`+`cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2 | head -n 1`+
			`cat /tmp/system.cfg | grep wireless.1.ssid | cut -d= -f2`+-`/usr/www/signal.cgi | grep signal | cut -d- -f2 | cut -c-2`"')

	out=$?

	if [ $out = 255 ]; then
		run=$(connectSSHp7722 "$1" "$2" "$3" 'echo "`cat /etc/board.info | grep board.name | cut -d= -f2`+
		`cat /etc/board.info | grep board.hwaddr | cut -d= -f2`+`cat /tmp/system.cfg | grep ppp.1.name | cut -d= -f2  | head -n 1`+
			`cat /tmp/system.cfg | grep wireless.1.ssid | cut -d= -f2`+-`/usr/www/signal.cgi | grep signal | cut -d- -f2 | cut -c-2`"')

		out=$?
	fi
	
	echo $run+$out

unset out run
}




removeLinesDuplicate() {

echo "Remover linhas duplicadas - ARG1:$1, ARG2:$2"

}

